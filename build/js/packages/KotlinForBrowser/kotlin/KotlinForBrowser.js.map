{"version":3,"file":"KotlinForBrowser.js","sources":["../../../../../kotlin-react-dom/src/main/kotlin/react/dom/ReactDOMTags.kt","../../../../../kotlin-styled/src/main/kotlin/styled/StyledTags.kt","../../../../../src/main/kotlin/Hello.kt","text/Strings.kt","util/Standard.kt","../../../../../kotlin-extensions/src/main/kotlin/kotlinext/js/Helpers.kt","../../../../../kotlin-react-dom/src/main/kotlin/react/dom/RDOMBuilder.kt","../../../../../src/main/kotlin/Joke.kt","../../../../../kotlin-styled/src/main/kotlin/styled/StyledComponents.kt","../../../../../src/main/kotlin/Main.kt"],"sourcesContent":[null,"@file:Suppress(\"NOTHING_TO_INLINE\")\n\npackage styled\n\nimport kotlinx.html.*\nimport kotlinx.html.attributes.*\nimport react.*\n\ninline fun <T : Tag> RBuilder.styledTag(block: StyledDOMBuilder<T>.() -> Unit, noinline factory: (TagConsumer<Unit>) -> T) =\n    child(StyledDOMBuilder(factory).apply(block).create())\n\n\ninline fun RBuilder.styledA(href: String? = null, target: String? = null, block: StyledDOMBuilder<A>.() -> Unit) = styledTag(block) { A(attributesMapOf(\"href\", href, \"target\", target), it) }\n\ninline fun RBuilder.styledAbbr(block: StyledDOMBuilder<ABBR>.() -> Unit) = styledTag(block) { ABBR(emptyMap, it) }\n\ninline fun RBuilder.styledAddress(block: StyledDOMBuilder<ADDRESS>.() -> Unit) = styledTag(block) { ADDRESS(emptyMap, it) }\n\ninline fun RBuilder.styledArea(shape: AreaShape? = null, alt: String? = null, block: StyledDOMBuilder<AREA>.() -> Unit) =\n    styledTag(block) { AREA(attributesMapOf(\"Shape\", shape?.enumEncode(), \"alt\", alt), it) }\n\ninline fun RBuilder.styledArticle(block: StyledDOMBuilder<ARTICLE>.() -> Unit) = styledTag(block) { ARTICLE(emptyMap, it) }\n\ninline fun RBuilder.styledAside(block: StyledDOMBuilder<ASIDE>.() -> Unit) = styledTag(block) { ASIDE(emptyMap, it) }\n\ninline fun RBuilder.styledAudio(block: StyledDOMBuilder<AUDIO>.() -> Unit) = styledTag(block) { AUDIO(emptyMap, it) }\n\ninline fun RBuilder.styledB(block: StyledDOMBuilder<B>.() -> Unit) = styledTag(block) { B(emptyMap, it) }\n\ninline fun RBuilder.styledBase(block: StyledDOMBuilder<BASE>.() -> Unit) = styledTag(block) { BASE(emptyMap, it) }\n\ninline fun RBuilder.styledBdi(block: StyledDOMBuilder<BDI>.() -> Unit) = styledTag(block) { BDI(emptyMap, it) }\n\ninline fun RBuilder.styledBdo(block: StyledDOMBuilder<BDO>.() -> Unit) = styledTag(block) { BDO(emptyMap, it) }\n\ninline fun RBuilder.styledBlockQuote(block: StyledDOMBuilder<BLOCKQUOTE>.() -> Unit) = styledTag(block) { BLOCKQUOTE(emptyMap, it) }\n\ninline fun RBuilder.styledBody(block: StyledDOMBuilder<BODY>.() -> Unit) = styledTag(block) { BODY(emptyMap, it) }\n\ninline fun RBuilder.styledBr(block: StyledDOMBuilder<BR>.() -> Unit) = styledTag(block) { BR(emptyMap, it) }\n\ninline fun RBuilder.styledButton(formEncType: ButtonFormEncType? = null, formMethod: ButtonFormMethod? = null, type: ButtonType? = null, block: StyledDOMBuilder<BUTTON>.() -> Unit) =\n    styledTag(block) { BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(), \"formmethod\", formMethod?.enumEncode(), \"type\", type?.enumEncode()), it) }\n\ninline fun RBuilder.styledCanvas(content: String = \"\") = styledTag({ +content }) { CANVAS(emptyMap, it) }\ninline fun RBuilder.styledCanvas(block: StyledDOMBuilder<CANVAS>.() -> Unit) = styledTag(block) { CANVAS(emptyMap, it) }\n\ninline fun RBuilder.styledCaption(block: StyledDOMBuilder<CAPTION>.() -> Unit) = styledTag(block) { CAPTION(emptyMap, it) }\n\ninline fun RBuilder.styledCite(block: StyledDOMBuilder<CITE>.() -> Unit) = styledTag(block) { CITE(emptyMap, it) }\n\ninline fun RBuilder.styledCode(block: StyledDOMBuilder<CODE>.() -> Unit) = styledTag(block) { CODE(emptyMap, it) }\n\ninline fun RBuilder.styledCol(block: StyledDOMBuilder<COL>.() -> Unit) = styledTag(block) { COL(emptyMap, it) }\n\ninline fun RBuilder.styledColGroup(block: StyledDOMBuilder<COLGROUP>.() -> Unit) = styledTag(block) { COLGROUP(emptyMap, it) }\n\ninline fun RBuilder.styledCommand(type: CommandType? = null, block: StyledDOMBuilder<COMMAND>.() -> Unit) = styledTag(block) { COMMAND(attributesMapOf(\"type\", type?.enumEncode()), it) }\n\ninline fun RBuilder.styledDataList(block: StyledDOMBuilder<DATALIST>.() -> Unit) = styledTag(block) { DATALIST(emptyMap, it) }\n\ninline fun RBuilder.styledDd(block: StyledDOMBuilder<DD>.() -> Unit) = styledTag(block) { DD(emptyMap, it) }\n\ninline fun RBuilder.styledDel(block: StyledDOMBuilder<DEL>.() -> Unit) = styledTag(block) { DEL(emptyMap, it) }\n\ninline fun RBuilder.styledDetails(block: StyledDOMBuilder<DETAILS>.() -> Unit) = styledTag(block) { DETAILS(emptyMap, it) }\n\ninline fun RBuilder.styledDfn(block: StyledDOMBuilder<DFN>.() -> Unit) = styledTag(block) { DFN(emptyMap, it) }\n\ninline fun RBuilder.styledDialog(block: StyledDOMBuilder<DIALOG>.() -> Unit) = styledTag(block) { DIALOG(emptyMap, it) }\n\ninline fun RBuilder.styledDiv(block: StyledDOMBuilder<DIV>.() -> Unit) = styledTag(block) { DIV(emptyMap, it) }\n\ninline fun RBuilder.styledDl(block: StyledDOMBuilder<DL>.() -> Unit) = styledTag(block) { DL(emptyMap, it) }\n\ninline fun RBuilder.styledDt(block: StyledDOMBuilder<DT>.() -> Unit) = styledTag(block) { DT(emptyMap, it) }\n\ninline fun RBuilder.styledEm(block: StyledDOMBuilder<EM>.() -> Unit) = styledTag(block) { EM(emptyMap, it) }\n\ninline fun RBuilder.styledEmbed(block: StyledDOMBuilder<EMBED>.() -> Unit) = styledTag(block) { EMBED(emptyMap, it) }\n\ninline fun RBuilder.styledFieldSet(block: StyledDOMBuilder<FIELDSET>.() -> Unit) = styledTag(block) { FIELDSET(emptyMap, it) }\n\ninline fun RBuilder.styledFigcaption(block: StyledDOMBuilder<FIGCAPTION>.() -> Unit) = styledTag(block) { FIGCAPTION(emptyMap, it) }\n\ninline fun RBuilder.styledFigure(block: StyledDOMBuilder<FIGURE>.() -> Unit) = styledTag(block) { FIGURE(emptyMap, it) }\n\ninline fun RBuilder.styledFooter(block: StyledDOMBuilder<FOOTER>.() -> Unit) = styledTag(block) { FOOTER(emptyMap, it) }\n\ninline fun RBuilder.styledForm(action: String? = null, encType: FormEncType? = null, method: FormMethod? = null, block: StyledDOMBuilder<FORM>.() -> Unit) =\n    styledTag(block) { FORM(attributesMapOf(\"action\", action, \"enctype\", encType?.enumEncode(), \"method\", method?.enumEncode()), it) }\n\ninline fun RBuilder.styledH1(block: StyledDOMBuilder<H1>.() -> Unit) = styledTag(block) { H1(emptyMap, it) }\n\ninline fun RBuilder.styledH2(block: StyledDOMBuilder<H2>.() -> Unit) = styledTag(block) { H2(emptyMap, it) }\n\ninline fun RBuilder.styledH3(block: StyledDOMBuilder<H3>.() -> Unit) = styledTag(block) { H3(emptyMap, it) }\n\ninline fun RBuilder.styledH4(block: StyledDOMBuilder<H4>.() -> Unit) = styledTag(block) { H4(emptyMap, it) }\n\ninline fun RBuilder.styledH5(block: StyledDOMBuilder<H5>.() -> Unit) = styledTag(block) { H5(emptyMap, it) }\n\ninline fun RBuilder.styledH6(block: StyledDOMBuilder<H6>.() -> Unit) = styledTag(block) { H6(emptyMap, it) }\n\ninline fun RBuilder.styledHead(block: StyledDOMBuilder<HEAD>.() -> Unit) = styledTag(block) { HEAD(emptyMap, it) }\n\ninline fun RBuilder.styledHeader(block: StyledDOMBuilder<HEADER>.() -> Unit) = styledTag(block) { HEADER(emptyMap, it) }\n\ninline fun RBuilder.styledHGroup(block: StyledDOMBuilder<HGROUP>.() -> Unit) = styledTag(block) { HGROUP(emptyMap, it) }\n\ninline fun RBuilder.styledHr(block: StyledDOMBuilder<HR>.() -> Unit) = styledTag(block) { HR(emptyMap, it) }\n\ninline fun RBuilder.styledHtml(block: StyledDOMBuilder<HTML>.() -> Unit) = styledTag(block) { HTML(emptyMap, it) }\n\ninline fun RBuilder.styledI(block: StyledDOMBuilder<I>.() -> Unit) = styledTag(block) { I(emptyMap, it) }\n\ninline fun RBuilder.styledIframe(sandbox: IframeSandbox? = null, content: String = \"\") = styledTag({ +content }) { IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode()), it) }\ninline fun RBuilder.styledIframe(sandbox: IframeSandbox? = null, block: StyledDOMBuilder<IFRAME>.() -> Unit) = styledTag(block) { IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode()), it) }\n\ninline fun RBuilder.styledImg(alt: String? = null, src: String? = null, block: StyledDOMBuilder<IMG>.() -> Unit) = styledTag(block) { IMG(attributesMapOf(\"alt\", alt, \"src\", src), it) }\n\ninline fun RBuilder.styledInput(type: InputType? = null, formEncType: InputFormEncType? = null, formMethod: InputFormMethod? = null, name: String? = null, block: StyledDOMBuilder<INPUT>.() -> Unit) =\n    styledTag(block) { INPUT(attributesMapOf(\"type\", type?.enumEncode(), \"formenctype\", formEncType?.enumEncode(), \"formmethod\", formMethod?.enumEncode(), \"name\", name), it) }\n\ninline fun RBuilder.styledIns(block: StyledDOMBuilder<INS>.() -> Unit) = styledTag(block) { INS(emptyMap, it) }\n\ninline fun RBuilder.styledKbd(block: StyledDOMBuilder<KBD>.() -> Unit) = styledTag(block) { KBD(emptyMap, it) }\n\ninline fun RBuilder.styledKeyGen(keyType: KeyGenKeyType? = null, block: StyledDOMBuilder<KEYGEN>.() -> Unit) = styledTag(block) { KEYGEN(attributesMapOf(\"keytype\", keyType?.enumEncode()), it) }\n\ninline fun RBuilder.styledLabel(block: StyledDOMBuilder<LABEL>.() -> Unit) = styledTag(block) { LABEL(emptyMap, it) }\n\ninline fun RBuilder.styledLegend(block: StyledDOMBuilder<LEGEND>.() -> Unit) = styledTag(block) { LEGEND(emptyMap, it) }\n\ninline fun RBuilder.styledLi(block: StyledDOMBuilder<LI>.() -> Unit) = styledTag(block) { LI(emptyMap, it) }\n\ninline fun RBuilder.styledLink(href: String? = null, rel: String? = null, type: String? = null, block: StyledDOMBuilder<LINK>.() -> Unit) =\n    styledTag(block) { LINK(attributesMapOf(\"href\", href, \"rel\", rel, \"type\", type), it) }\n\ninline fun RBuilder.styledMap(name: String? = null, block: StyledDOMBuilder<MAP>.() -> Unit) = styledTag(block) { MAP(attributesMapOf(\"name\", name), it) }\n\ninline fun RBuilder.styledMark(block: StyledDOMBuilder<MARK>.() -> Unit) = styledTag(block) { MARK(emptyMap, it) }\n\ninline fun RBuilder.styledMath(block: StyledDOMBuilder<MATH>.() -> Unit) = styledTag(block) { MATH(emptyMap, it) }\n\ninline fun RBuilder.styledMathml(content: String = \"\") = styledTag({ +content }) { MATHML(emptyMap, it) }\ninline fun RBuilder.styledMathml(block: StyledDOMBuilder<MATHML>.() -> Unit) = styledTag(block) { MATHML(emptyMap, it) }\n\ninline fun RBuilder.styledMeta(name: String? = null, content: String? = null, block: StyledDOMBuilder<META>.() -> Unit) =\n    styledTag(block) { META(attributesMapOf(\"name\", name, \"content\", content), it) }\n\ninline fun RBuilder.styledMeter(block: StyledDOMBuilder<METER>.() -> Unit) = styledTag(block) { METER(emptyMap, it) }\n\ninline fun RBuilder.styledNav(block: StyledDOMBuilder<NAV>.() -> Unit) = styledTag(block) { NAV(emptyMap, it) }\n\ninline fun RBuilder.styledNoScript(block: StyledDOMBuilder<NOSCRIPT>.() -> Unit) = styledTag(block) { NOSCRIPT(emptyMap, it) }\n\ninline fun RBuilder.styledObject(block: StyledDOMBuilder<OBJECT>.() -> Unit) = styledTag(block) { OBJECT(emptyMap, it) }\n\ninline fun RBuilder.styledOl(block: StyledDOMBuilder<OL>.() -> Unit) = styledTag(block) { OL(emptyMap, it) }\n\ninline fun RBuilder.styledOptGroup(label: String? = null, block: StyledDOMBuilder<OPTGROUP>.() -> Unit) = styledTag(block) { OPTGROUP(attributesMapOf(\"label\", label), it) }\n\ninline fun RBuilder.styledOption(content: String = \"\") = styledTag({ +content }) { OPTION(emptyMap, it) }\ninline fun RBuilder.styledOption(block: StyledDOMBuilder<OPTION>.() -> Unit) = styledTag(block) { OPTION(emptyMap, it) }\n\ninline fun RBuilder.styledOutput(block: StyledDOMBuilder<OUTPUT>.() -> Unit) = styledTag(block) { OUTPUT(emptyMap, it) }\n\ninline fun RBuilder.styledP(block: StyledDOMBuilder<P>.() -> Unit) = styledTag(block) { P(emptyMap, it) }\n\ninline fun RBuilder.styledParam(name: String? = null, value: String? = null, block: StyledDOMBuilder<PARAM>.() -> Unit) = styledTag(block) { PARAM(attributesMapOf(\"name\", name, \"value\", value), it) }\n\ninline fun RBuilder.styledPre(block: StyledDOMBuilder<PRE>.() -> Unit) = styledTag(block) { PRE(emptyMap, it) }\n\ninline fun RBuilder.styledProgress(block: StyledDOMBuilder<PROGRESS>.() -> Unit) = styledTag(block) { PROGRESS(emptyMap, it) }\n\ninline fun RBuilder.styledQ(block: StyledDOMBuilder<Q>.() -> Unit) = styledTag(block) { Q(emptyMap, it) }\n\ninline fun RBuilder.styledRp(block: StyledDOMBuilder<RP>.() -> Unit) = styledTag(block) { RP(emptyMap, it) }\n\ninline fun RBuilder.styledRt(block: StyledDOMBuilder<RT>.() -> Unit) = styledTag(block) { RT(emptyMap, it) }\n\ninline fun RBuilder.styledRuby(block: StyledDOMBuilder<RUBY>.() -> Unit) = styledTag(block) { RUBY(emptyMap, it) }\n\ninline fun RBuilder.styledSamp(block: StyledDOMBuilder<SAMP>.() -> Unit) = styledTag(block) { SAMP(emptyMap, it) }\n\ninline fun RBuilder.styledScript(type: String? = null, src: String? = null, block: StyledDOMBuilder<SCRIPT>.() -> Unit) = styledTag(block) { SCRIPT(attributesMapOf(\"type\", type, \"src\", src), it) }\n\ninline fun RBuilder.styledSection(block: StyledDOMBuilder<SECTION>.() -> Unit) = styledTag(block) { SECTION(emptyMap, it) }\n\ninline fun RBuilder.styledSelect(block: StyledDOMBuilder<SELECT>.() -> Unit) = styledTag(block) { SELECT(emptyMap, it) }\n\ninline fun RBuilder.styledSmall(block: StyledDOMBuilder<SMALL>.() -> Unit) = styledTag(block) { SMALL(emptyMap, it) }\n\ninline fun RBuilder.styledSource(block: StyledDOMBuilder<SOURCE>.() -> Unit) = styledTag(block) { SOURCE(emptyMap, it) }\n\ninline fun RBuilder.styledSpan(block: StyledDOMBuilder<SPAN>.() -> Unit) = styledTag(block) { SPAN(emptyMap, it) }\n\ninline fun RBuilder.styledStrong(block: StyledDOMBuilder<STRONG>.() -> Unit) = styledTag(block) { STRONG(emptyMap, it) }\n\ninline fun RBuilder.styledStyle(type: String? = null, content: String = \"\") = styledTag({ +content }) { STYLE(attributesMapOf(\"type\", type), it) }\ninline fun RBuilder.styledStyle(type: String? = null, block: StyledDOMBuilder<STYLE>.() -> Unit) = styledTag(block) { STYLE(attributesMapOf(\"type\", type), it) }\n\ninline fun RBuilder.styledSub(block: StyledDOMBuilder<SUB>.() -> Unit) = styledTag(block) { SUB(emptyMap, it) }\n\ninline fun RBuilder.styledSup(block: StyledDOMBuilder<SUP>.() -> Unit) = styledTag(block) { SUP(emptyMap, it) }\n\ninline fun RBuilder.styledSvg(content: String = \"\") = styledTag({ +content }) { SVG(emptyMap, it) }\ninline fun RBuilder.styledSvg(block: StyledDOMBuilder<SVG>.() -> Unit) = styledTag(block) { SVG(emptyMap, it) }\n\ninline fun RBuilder.styledTable(block: StyledDOMBuilder<TABLE>.() -> Unit) = styledTag(block) { TABLE(emptyMap, it) }\n\ninline fun RBuilder.styledTbody(block: StyledDOMBuilder<TBODY>.() -> Unit) = styledTag(block) { TBODY(emptyMap, it) }\n\ninline fun RBuilder.styledTd(block: StyledDOMBuilder<TD>.() -> Unit) = styledTag(block) { TD(emptyMap, it) }\n\ninline fun RBuilder.styledTextArea(rows: String? = null, cols: String? = null, wrap: TextAreaWrap? = null, content: String = \"\") =\n    styledTag({ +content }) { TEXTAREA(attributesMapOf(\"rows\", rows, \"cols\", cols, \"wrap\", wrap?.enumEncode()), it) }\n\ninline fun RBuilder.styledTextArea(rows: String? = null, cols: String? = null, wrap: TextAreaWrap? = null, block: StyledDOMBuilder<TEXTAREA>.() -> Unit) =\n    styledTag(block) { TEXTAREA(attributesMapOf(\"rows\", rows, \"cols\", cols, \"wrap\", wrap?.enumEncode()), it) }\n\ninline fun RBuilder.styledTfoot(block: StyledDOMBuilder<TFOOT>.() -> Unit) = styledTag(block) { TFOOT(emptyMap, it) }\n\ninline fun RBuilder.styledTh(scope: ThScope? = null, block: StyledDOMBuilder<TH>.() -> Unit) = styledTag(block) { TH(attributesMapOf(\"scope\", scope?.enumEncode()), it) }\n\ninline fun RBuilder.styledThead(block: StyledDOMBuilder<THEAD>.() -> Unit) = styledTag(block) { THEAD(emptyMap, it) }\n\ninline fun RBuilder.styledTime(block: StyledDOMBuilder<TIME>.() -> Unit) = styledTag(block) { TIME(emptyMap, it) }\n\ninline fun RBuilder.styledTitle(content: String = \"\") = styledTag({ +content }) { TITLE(emptyMap, it) }\ninline fun RBuilder.styledTitle(block: StyledDOMBuilder<TITLE>.() -> Unit) = styledTag(block) { TITLE(emptyMap, it) }\n\ninline fun RBuilder.styledTr(block: StyledDOMBuilder<TR>.() -> Unit) = styledTag(block) { TR(emptyMap, it) }\n\ninline fun RBuilder.styledUl(block: StyledDOMBuilder<UL>.() -> Unit) = styledTag(block) { UL(emptyMap, it) }\n\ninline fun RBuilder.styledVar(block: StyledDOMBuilder<VAR>.() -> Unit) = styledTag(block) { VAR(emptyMap, it) }\n\ninline fun RBuilder.styledVideo(block: StyledDOMBuilder<VIDEO>.() -> Unit) = styledTag(block) { VIDEO(emptyMap, it) }\n",null,null,null,null,null,null,"package styled\n\nimport kotlinext.js.*\nimport kotlinx.css.*\nimport kotlinx.html.*\nimport org.w3c.dom.*\nimport react.*\nimport react.dom.*\nimport kotlin.browser.*\nimport kotlin.js.*\n\ntypealias AnyTagStyledBuilder = StyledDOMBuilder<CommonAttributeGroupFacade>\ntypealias AnyBuilder = AnyTagStyledBuilder.() -> Unit\n\ntypealias HTMLTagBuilder = StyledDOMBuilder<HTMLTag>.() -> Unit\n\ntypealias ABuilder = StyledDOMBuilder<A>.() -> Unit\ntypealias DIVBuilder = StyledDOMBuilder<DIV>.() -> Unit\ntypealias SPANBuilder = StyledDOMBuilder<SPAN>.() -> Unit\ntypealias INPUTBuilder = StyledDOMBuilder<INPUT>.() -> Unit\n\nexternal interface CustomStyledProps : RProps {\n    var css: ArrayList<RuleSet>?\n}\n\ninline fun CustomStyledProps.forwardCss(builder: CSSBuilder) {\n    css?.forEach { it(builder) }\n}\n\ninline fun CustomStyledProps.forwardCss(props: CustomStyledProps) {\n    css?.forEach { c ->\n        if (props.css == null) {\n            props.css = ArrayList()\n        }\n        props.css!!.add(c)\n    }\n}\n\ninterface StyledBuilder<P : WithClassName> {\n    val css: CSSBuilder\n    val type: Any\n}\n\ninline fun StyledBuilder<*>.css(handler: RuleSet) = css.handler()\n\nclass StyledElementBuilder<P : WithClassName>(\n    override val type: Any,\n    attrs: P = jsObject()\n) : RElementBuilder<P>(attrs), StyledBuilder<P> {\n    override val css = CSSBuilder()\n\n    fun create() = Styled.createElement(type, css, attrs, childList)\n}\n\nclass StyledDOMBuilder<out T : Tag>(factory: (TagConsumer<Unit>) -> T) : RDOMBuilder<T>(factory), StyledBuilder<DOMProps> {\n    override val type: Any = attrs.tagName\n    override val css = CSSBuilder()\n\n    override fun create() = Styled.createElement(type, css, props, childList)\n}\n\ntypealias StyledHandler<P> = StyledElementBuilder<P>.() -> Unit\n\nfun <P : WithClassName> styled(type: RClass<P>): RBuilder.(StyledHandler<P>) -> ReactElement = { handler ->\n    child(with(StyledElementBuilder<P>(type)) {\n        handler()\n        create()\n    })\n}\n\ninline fun CustomStyledProps.css(noinline handler: RuleSet) {\n    if (css == null) {\n        css = ArrayList()\n    }\n    css!!.add(handler)\n}\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninline fun <P : CustomStyledProps> RElementBuilder<P>.css(noinline handler: RuleSet) = attrs.css(handler)\n\n/**\n * @deprecated Use [keyframes] and [css] instead\n */\n@Suppress(\"NOTHING_TO_INLINE\")\ninline fun keyframesName(string: String): String {\n    val keyframe = keyframes(string)\n    injectGlobal(css(keyframe))\n\n    return keyframe.getName()\n}\n\nprivate var globalStylesCounter = 0\n\n/**\n * @deprecated Use [createGlobalStyle] instead\n */\nfun injectGlobal(string: String) {\n    val globalStyleComponent = createGlobalStyle(string)\n    val element = window.document.body!!.appendChild(window.document.createElement(\"div\")) as Element\n    element.setAttribute(\"id\", \"sc-global-style-${globalStylesCounter++}\")\n    val reactElement = createElement(globalStyleComponent, js {})\n    Promise.resolve(Unit).then {\n        render(reactElement, element)\n    }\n}\n\nfun injectGlobal(handler: CSSBuilder.() -> Unit) {\n    injectGlobal(CSSBuilder().apply { handler() }.toString())\n}\n\nobject Styled {\n    private val cache = mutableMapOf<dynamic, dynamic>()\n\n    private fun wrap(type: dynamic) =\n        cache.getOrPut(type) {\n            (default(type))({ it.css })\n        }\n\n    fun createElement(type: Any, css: CSSBuilder, props: WithClassName, children: List<Any>): ReactElement {\n        if (css.rules.isNotEmpty() || css.multiRules.isNotEmpty() || css.declarations.isNotEmpty()) {\n            val wrappedType = wrap(type)\n            val styledProps = props.unsafeCast<StyledProps>()\n            styledProps.css = css.toString()\n            if (css.classes.isNotEmpty()) {\n                styledProps.className = css.classes.joinToString(separator = \" \")\n            }\n            if (css.styleName.isNotEmpty()) {\n                styledProps.asDynamic()[\"data-style\"] = css.styleName.joinToString(separator = \" \")\n            }\n            return createElement(wrappedType, styledProps, *children.toTypedArray())\n        } else {\n            if (css.classes.isNotEmpty()) {\n                props.className = css.classes.joinToString(separator = \" \")\n            }\n            return createElement(type, props, *children.toTypedArray())\n        }\n    }\n}\n",null],"names":[],"mappings":"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"}